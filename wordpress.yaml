AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS CloudFormation for WordPress'
Parameters:
    InstanceType:
        Description: WebServer EC2 instance type
        Type: String
        Default: t2.small
        AllowedValues:
        - t1.micro
        - t2.nano
        - t2.micro
        - t2.small
        - t2.medium
        - t2.large
        - m1.small
        - m1.medium
        - m1.large
        - m1.xlarge
        - m2.xlarge
        - m2.2xlarge
        - m2.4xlarge
        - m3.medium
        - m3.large
        - m3.xlarge
        - m3.2xlarge
        - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
        - m4.10xlarge
        - c1.medium
        - c1.xlarge
        - c3.large
        - c3.xlarge
        - c3.2xlarge
        - c3.4xlarge
        - c3.8xlarge
        - c4.large
        - c4.xlarge
        - c4.2xlarge
        - c4.4xlarge
        - c4.8xlarge
        - g2.2xlarge
        - g2.8xlarge
        - r3.large
        - r3.xlarge
        - r3.2xlarge
        - r3.4xlarge
        - r3.8xlarge
        - i2.xlarge
        - i2.2xlarge
        - i2.4xlarge
        - i2.8xlarge
        - d2.xlarge
        - d2.2xlarge
        - d2.4xlarge
        - d2.8xlarge
        - hi1.4xlarge
        - hs1.8xlarge
        - cr1.8xlarge
        - cc2.8xlarge
        - cg1.4xlarge
        ConstraintDescription: must be a valid EC2 instance type.

    DBClass:
        Description: Database instance class
        Type: String
        Default: db.t2.small
        AllowedValues:
        - db.t1.micro
        - db.m1.small
        - db.m1.medium
        - db.m1.large
        - db.m1.xlarge
        - db.m2.xlarge
        - db.m2.2xlarge
        - db.m2.4xlarge
        - db.m3.medium
        - db.m3.large
        - db.m3.xlarge
        - db.m3.2xlarge
        - db.m4.large
        - db.m4.xlarge
        - db.m4.2xlarge
        - db.m4.4xlarge
        - db.m4.10xlarge
        - db.r3.large
        - db.r3.xlarge
        - db.r3.2xlarge
        - db.r3.4xlarge
        - db.r3.8xlarge
        - db.m2.xlarge
        - db.m2.2xlarge
        - db.m2.4xlarge
        - db.cr1.8xlarge
        - db.t2.micro
        - db.t2.small
        - db.t2.medium
        - db.t2.large
        ConstraintDescription: must select a valid database instance type.
    DBName:
        Default: wordpressdb
        Description: The WordPress database name
        Type: String
        MinLength: '1'
        MaxLength: '64'
        AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
        ConstraintDescription: must begin with a letter and contain only alphanumeric
            characters.
    DBUser:
        NoEcho: 'true'
        Description: The WordPress database admin account username
        Type: String
        MinLength: '1'
        MaxLength: '16'
        AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
        ConstraintDescription: must begin with a letter and contain only alphanumeric
            characters.
    DBPassword:
        NoEcho: 'true'
        Description: The WordPress database admin account password
        Type: String
        MinLength: '8'
        MaxLength: '41'
        AllowedPattern: '[a-zA-Z0-9]*'
        ConstraintDescription: must contain only alphanumeric characters.
    MultiAZDatabase:
        Default: 'false'
        Description: Create a Multi-AZ MySQL Amazon RDS database instance
        Type: String
        AllowedValues:
        - 'true'
        - 'false'
        ConstraintDescription: must be either true or false.
    WebServerCapacity:
        Default: '1'
        Description: The initial number of WebServer instances
        Type: Number
        MinValue: '1'
        MaxValue: '5'
        ConstraintDescription: must be between 1 and 5 EC2 instances.
    DBAllocatedStorage:
        Default: '5'
        Description: The size of the database (Gb)
        Type: Number
        MinValue: '5'
        MaxValue: '1024'
        ConstraintDescription: must be between 5 and 1024Gb.
    MinimumASGSize:
        Description: Minimum number Of EC2 Instances in this stack's ASG
        Default: '2'
        Type: String
        AllowedPattern: '[0-9]*'
        ConstraintDescription: must contain only numeric characters.
    MaximumASGSize:
        Description: Maximum number Of EC2 Instances in this stack's ASG
        Default: '5'
        Type: String
        AllowedPattern: '[0-9]*'
        ConstraintDescription: must contain only numeric characters.
Mappings:
    AWSRegionAMIEC2:
        eu-north-1:
            'ubuntu': ami-01cc5333d19d509d3
        ap-south-1:
            'ubuntu': ami-02def66f5c32f4f2b
        eu-west-3:
            'ubuntu': ami-04d53e1b6d843f8fa
        eu-west-2:
            'ubuntu': ami-0820357ff5cf2333d
        eu-west-1:
            'ubuntu': ami-0f52887e1cb557b55
        ap-northeast-2:
            'ubuntu': ami-005ede73f888b317f
        ap-northeast-1:
            'ubuntu': ami-071c64dd45080ce0b
        sa-east-1:
            'ubuntu': ami-004c8f619d7ca0f36
        ca-central-1:
            'ubuntu': ami-0dc24446d93e1b2f3
        ap-southeast-1:
            'ubuntu': ami-07c4661e10b404bbb
        ap-southeast-2:
            'ubuntu': ami-0ff0fa9d409d5181c
        eu-central-1:
            'ubuntu': ami-0494594c0ab2e6df4
        us-east-1:
            'ubuntu': ami-0b893eef6e21b60a1
        us-east-2:
            'ubuntu': ami-0ebc84cad4ab1c308
        us-west-1:
            'ubuntu': ami-00da7d550c0cbaa7b
        us-west-2:
            'ubuntu': ami-0f004f40550f73050
Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-VPC'
    Subnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select [ 0, !GetAZs  '' ]
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.0/20
        Tags:
          - Key: Name
            Value: !Sub '${AWS::StackName}-SNet1'
    Subnet2:
          Type: AWS::EC2::Subnet
          Properties:
            AvailabilityZone: !Select [ 1, !GetAZs  '' ]
            VpcId: !Ref VPC
            CidrBlock: 10.0.16.0/20
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-SNet2'
    myInternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
            - Key: Name
              Value: !Sub 'igw-${AWS::StackName}'
    AttachGateway:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref myInternetGateway
    RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-rtb'
    Route:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref RouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref myInternetGateway
    Subnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref RouteTable
            SubnetId: !Ref Subnet1
    Subnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref RouteTable
            SubnetId: !Ref Subnet2
    ALBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Open to internet
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: '80'
                ToPort: '80'
                CidrIp: 0.0.0.0/0
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-ALB-sg'
    ApplicationLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
                - !Ref ALBSecurityGroup
            Subnets:
                - !Ref Subnet1
                - !Ref Subnet2
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-ALB'
    ALBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn:
                    Ref: ALBTargetGroup
            LoadBalancerArn:
                Ref: ApplicationLoadBalancer
            Port: '80'
            Protocol: HTTP
    ALBTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckPath: /wordpress/wp-admin/install.php
            HealthCheckIntervalSeconds: 10
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: !Ref VPC
            TargetGroupAttributes:
            -   Key: stickiness.enabled
                Value: 'true'
            -   Key: stickiness.type
                Value: lb_cookie
            -   Key: stickiness.lb_cookie.duration_seconds
                Value: '30'
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-targetGroup-ALB'
    WebServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable HTTP access via port 80 only from the ALB
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: '80'
                ToPort: '80'
                SourceSecurityGroupId: !Ref ALBSecurityGroup
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-EC2-Sg'
    WebServerGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - !Ref Subnet1
                - !Ref Subnet2
            LaunchConfigurationName:
                Ref: LaunchConfig
            MinSize: !Ref MinimumASGSize
            MaxSize: !Ref MaximumASGSize
            Cooldown: '60'
            DesiredCapacity:
                Ref: WebServerCapacity
            TargetGroupARNs:
            -   Ref: ALBTargetGroup
            Tags:
              - Key: Name
                PropagateAtLaunch: true
                Value: !Sub '${AWS::StackName}-ASG'
        CreationPolicy:
            ResourceSignal:
                Timeout: PT25M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: '1'
                MaxBatchSize: '1'
                PauseTime: PT20M
                WaitOnResourceSignals: 'true'
                SuspendProcesses:
                    - HealthCheck
                    - ReplaceUnhealthy
                    - AZRebalance
                    - AlarmNotification
                    - ScheduledActions
    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    wordpress_install:
                    - install_cfn
                    - install_wordpress
                install_cfn:
                    files:
                        /etc/cfn/cfn-hup.conf:
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                                verbose=true
                                interval=5

                            mode: '000400'
                            owner: root
                            group: root
                        /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                            content: !Sub |
                                    [cfn-auto-reloader-hook]
                                    triggers=post.update
                                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                                    action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets wordpress_install --region ${AWS::Region}
                                    runas=root
                            mode: '000400'
                            owner: root
                            group: root
                        #systemd service
                        /lib/systemd/system/cfn-hup.service:
                            content: |
                                [Unit]
                                Description=Cloud formation helper daemon
                                [Service]
                                ExecStart=/opt/aws/bin/cfn-hup
                                Restart=always
                                RestartSec=10s
                                Type=simple
                                NotifyAccess=all
                                TimeoutStartSec=120
                                TimeoutStopSec=15

                                [Install]
                                WantedBy=multi-user.target
                            mode: "000400"
                            owner: root
                            group: root
                    commands:
                        enable-cfn-hup:
                            command: systemctl enable cfn-hup.service
                        start-cfn-hup:
                            command: systemctl start cfn-hup.service

                install_wordpress:
                    packages:
                        apt:
                            php: []
                            php-mysql: []
                            mysql-server: []
                            apache2: []
                    sources:
                        /var/www/html: http://wordpress.org/latest.tar.gz
                    files:
                        /tmp/create-wp-config:
                            content:
                                Fn::Join:
                                - ''
                                -   - |
                                        #!/bin/bash
                                    - |
                                        cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                                    - sed -i "s/'database_name_here'/'
                                    -   Ref: DBName
                                    - |
                                        '/g" wp-config.php
                                    - sed -i "s/'username_here'/'
                                    -   Ref: DBUser
                                    - |
                                        '/g" wp-config.php
                                    - sed -i "s/'password_here'/'
                                    -   Ref: DBPassword
                                    - |
                                        '/g" wp-config.php
                                    - sed -i "s/'localhost'/'
                                    -   Fn::GetAtt:
                                        - DBInstance
                                        - Endpoint.Address
                                    - |
                                        '/g" wp-config.php
                            mode: '000500'
                            owner: root
                            group: root
                    commands:
                        01_configure_wordpress:
                            command: /tmp/create-wp-config
                            cwd: /var/www/html/wordpress
                    services:
                        sysvinit:
                            apache2:
                                enabled: 'true'
                                ensureRunning: 'true'
        Properties:
            AssociatePublicIpAddress: true
            ImageId:
                Fn::FindInMap:
                - AWSRegionAMIEC2
                -   Ref: AWS::Region
                - ubuntu
            InstanceType: !Ref InstanceType
            SecurityGroups:
                - !Ref WebServerSecurityGroup
            UserData:
                Fn::Base64:
                    Fn::Join:
                    - ''
                    -   - |
                            #!/bin/bash -xe
                        - |
                            apt-get update -y
                        - |
                            apt-get install -y python-setuptools
                        - |
                            mkdir -p /opt/aws/bin
                        - |
                            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                        - |
                            python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
                        - |
                            chmod +x /opt/aws/bin/cfn-hup
                        - '/opt/aws/bin/cfn-init -v '
                        - '         --stack '
                        -   Ref: AWS::StackName
                        - '         --resource LaunchConfig '
                        - '         --configsets wordpress_install '
                        - '         --region '
                        -   Ref: AWS::Region
                        - |4+

                        - '/opt/aws/bin/cfn-signal -e $? '
                        - '         --stack '
                        -   Ref: AWS::StackName
                        - '         --resource WebServerGroup '
                        - '         --region '
                        -   Ref: AWS::Region
                        - |4+

    DBEC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Open database for access
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: '3306'
                ToPort: '3306'
                SourceSecurityGroupId: !Ref WebServerSecurityGroup
            VpcId: !Ref VPC
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-DB-sg'
    myDBSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: "RDS Subnet Group"
            SubnetIds:
                - !Ref Subnet1
                - !Ref Subnet2
    DBInstance:
        Type: AWS::RDS::DBInstance
        Properties:
            DBName:
                Ref: DBName
            Engine: MySQL
            MultiAZ:
                Ref: MultiAZDatabase
            MasterUsername:
                Ref: DBUser
            MasterUserPassword:
                Ref: DBPassword
            DBInstanceClass:
                Ref: DBClass
            AllocatedStorage:
                Ref: DBAllocatedStorage
            VPCSecurityGroups:
            -   Fn::GetAtt:
                - DBEC2SecurityGroup
                - GroupId
            DBSubnetGroupName: !Ref myDBSubnetGroup
            Tags:
              - Key: Name
                Value: !Sub '${AWS::StackName}-RDS-DB'

Outputs:
    WebsiteURL:
        Value:
            Fn::Join:
            - ''
            -   - http://
                -   Fn::GetAtt:
                    - ApplicationLoadBalancer
                    - DNSName
                - /wordpress
        Description: WordPress Website
